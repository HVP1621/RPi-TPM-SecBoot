From de9c1c0063cdb1f3a346f9f4c370d3e9ab2b305f Mon Sep 17 00:00:00 2001
From: Harshvardhan Patel <harshvardhan1621@gmail.com>
Date: Sun, 26 Dec 2021 18:01:20 +0530
Subject: [PATCH 5/5] RSA Verify Patch to look for Pub Key in TPM

---
 lib/rsa/rsa-verify.c | 55 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 53 insertions(+), 2 deletions(-)

diff --git a/lib/rsa/rsa-verify.c b/lib/rsa/rsa-verify.c
index 83f7564101..36bec99aec 100644
--- a/lib/rsa/rsa-verify.c
+++ b/lib/rsa/rsa-verify.c
@@ -14,6 +14,9 @@
 #include <asm/types.h>
 #include <asm/unaligned.h>
 #include <dm.h>
+#include <tpm-common.h>
+#include <tpm-v2.h>
+#include <../cmd/tpm-user-utils.h>
 #else
 #include "fdt_host.h"
 #include "mkimage.h"
@@ -344,6 +347,7 @@ static int rsa_verify_key(struct image_sign_info *info,
 		return -EIO;
 
 	if (sig_len != (prop->num_bits / 8)) {
+		printf("Signature Incorrect Length: %u, %u", sig_len, prop->num_bits);
 		debug("Signature is of incorrect length %d\n", sig_len);
 		return -EINVAL;
 	}
@@ -354,6 +358,8 @@ static int rsa_verify_key(struct image_sign_info *info,
 	if (sig_len > RSA_MAX_SIG_BITS / 8) {
 		debug("Signature length %u exceeds maximum %d\n", sig_len,
 		      RSA_MAX_SIG_BITS / 8);
+		printf("Signature length %u exceeds maximum %d\n", sig_len,
+		      RSA_MAX_SIG_BITS / 8);
 		return -EINVAL;
 	}
 
@@ -373,12 +379,14 @@ static int rsa_verify_key(struct image_sign_info *info,
 #endif
 	if (ret) {
 		debug("Error in Modular exponentation\n");
+		printf("Error in Modular exponentation\n");
 		return ret;
 	}
 
 	ret = padding->verify(info, buf, key_len, hash, hash_len);
 	if (ret) {
 		debug("In RSAVerify(): padding check failed!\n");
+		printf("In RSAVerify(): padding check failed!\n");
 		return ret;
 	}
 
@@ -404,13 +412,14 @@ int rsa_verify_with_pkey(struct image_sign_info *info,
 {
 	struct key_prop *prop;
 	int ret;
-
+	printf("Verifying with RSA Public Key ============================\n");
 	if (!CONFIG_IS_ENABLED(RSA_VERIFY_WITH_PKEY))
 		return -EACCES;
 
 	/* Public key is self-described to fill key_prop */
 	ret = rsa_gen_key_prop(info->key, info->keylen, &prop);
 	if (ret) {
+		printf("Generating necessary parameter for decoding failed: %d\n", ret);
 		debug("Generating necessary parameter for decoding failed\n");
 		return ret;
 	}
@@ -499,14 +508,56 @@ int rsa_verify_hash(struct image_sign_info *info,
 {
 	int ret = -EACCES;
 
-	if (CONFIG_IS_ENABLED(RSA_VERIFY_WITH_PKEY) && !info->fdt_blob) {
+	/* If RSA Verification is enabled, go looking for Pub key in TPM */
+	/* To-Do:
+	   1. Specify TPM index in defconfig
+	   2. Specify custom CONFIG for TPM verification */
+
+	if (CONFIG_IS_ENABLED(RSA_VERIFY_WITH_PKEY)) {
 		/* don't rely on fdt properties */
+		#ifndef USE_HOSTCC
+			struct udevice *dev = NULL;
+			int status = 0;
+
+			unsigned char pub_key[270] = {0};
+
+			status = get_tpm(&dev);
+
+			if(!dev)
+				printf("Unable to Get TPM2 Device: %d", status);
+
+			printf("Reading Pub Key from TPM\n");
+
+			status = tpm2_nv_read_value(dev, 3, pub_key, 270);
+
+			if(status)
+			{
+				printf("Error Reading from NVRAM: %d\n",status);
+			}
+
+			size_t itr = 0;
+			printf("==================KEY FROM TPM==================\n");
+
+			for(itr = 0; itr < 270; itr++)
+			{
+				printf("%u, ",pub_key[itr]);
+				if((itr + 1) % 16 == 0)
+					printf("\n");
+			}
+
+			printf("\n=================END=======================\n");
+
+			info->key = pub_key;
+			info->keylen = 270;
+		#endif
+
 		ret = rsa_verify_with_pkey(info, hash, sig, sig_len);
 
 		return ret;
 	}
 
 	if (CONFIG_IS_ENABLED(FIT_SIGNATURE)) {
+		printf("Relying on FDT Properties\n");
 		const void *blob = info->fdt_blob;
 		int ndepth, noffset;
 		int sig_node, node;
-- 
2.25.1

